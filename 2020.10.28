1. 输入10个数，存储到数组中，分别统计其中正数、负数、零的个数。
2. 定义一个整型数组int arr[10],读入用户输入的10个整型数，赋值给数组，
   求这个数组的最大值和最小值以及平均值。
3. 初始化一个整型变量int arr[10], 值随机。给这个数组从小到大排序。
********************************************************
/*
 1. 要将5张100元的大钞票，换成等值的50元，20元，10元，5元一张的小钞票，每种面值至少1张，编程求需要多少张纸币。
 2. 用for编程找出100~200中的完全平方数
 3. 百钱百鸡”问题。百钱买百鸡，鸡翁一值钱三，鸡母一值钱二，鸡雏三值钱一，问鸡翁、鸡母、鸡雏各几何？
 */
#include <stdio.h>

int main(void)
{
	for (int five = 1; five < 10; five++) {
		for (int two = 1; two < 25; two ++) {
			for (int one = 1; one < 50; one ++) {
				for (int f = 1; f < 100; f++) {
					if (five*50+two*20+one*10+f*5 == 500) {
						printf("五十:%d,二十:%d,十元:%d,五元:%d, 共%d张\n", five, two, one, f, five+two+one+f);						
					}
				}
			}
		}
	}	

	// 完全平方数
	for (int i = 10; i * i <= 200 && i < 15; i++) {
		printf("%d 是完全平方数\n", i*i);	
	}

	// 公鸡的个数
	for (int i = 0; i <= 33; i++) {
		// 母鸡
		for (int j = 0; j <= 50; j++) {
			// 小鸡
			for (int z = 0; z <= 300; z+=3) {
				if (i + j + z == 100 && i*3+j*2+z/3==100)
					printf("公鸡:%d, 母鸡:%d, 小鸡:%d\n", \
							i, j, z);
			}
		}
	}

	return 0;
}
*************************************************
#include <stdio.h>
int main(void)
{
	// 存储--->空间--->定义变量
	// 变量名--->标识符(函数名，类型名):由字母，数字，下划线组成，数字不开头，避开c关键字,区分大小写
	// 类型:数值类型 字符类型 复合类型 指针类型
	// 数值类型：整型和实型
	// 整型:short int long (long long)
	// 实型:float double long double
	// 字符类型:char
	// 空类型:void 
	// 有符号:signed 无符号:unsigned
	printf("short:%ld\n", sizeof(short));
	printf("int:%ld\n", sizeof(int));
	printf("long:%ld\n", sizeof(long));
	printf("long long:%ld\n", sizeof(long long));
	printf("float:%ld\n", sizeof(float));
	printf("double:%ld\n", sizeof(double));
	printf("long double:%ld\n", sizeof(long double));
	printf("char:%ld\n", sizeof(char));

	// 定义
	int var1;
	// 初始化
	char c = 'p';	

	// 赋值
	var1 = 100;

	printf("var = %d, c = %c\n", var1, c);

	return 0;
}
****************************************************
#include <stdio.h>
// 全局变量--->0
static int glob; // static  extern(默认)

int test(int n);
int main(void)
{
	// 局部变量--->值随机 auto(默认) static const register(寄存器变量) volatile(易失变量:防止编译优化)
	int var;
	const int n = 10; // 只读变量

	printf("%d\n", test(5));
	printf("%d\n", test(6));

	return 0;
}

int test(int n)
{
	static int a = 10; // 局部静态变量
	
	return n+a++;	
}
***************************************************
